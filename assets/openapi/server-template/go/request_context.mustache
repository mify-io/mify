{{>partial_header}}
// vim: set ft=go:
package {{packageName}}
// vim: set ft=go:

import (
	"context"
	"github.com/go-chi/chi/v5/middleware"
	"net/http"

	"{{goModule}}/internal/{{serviceName}}/generated/core"
)

type ctxKeyMifyContext int

const MifyContextField ctxKeyMifyContext = 0

func RequestContext(sc *core.MifyServiceContext) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		fn := func(w http.ResponseWriter, r *http.Request) {
			ww := middleware.NewWrapResponseWriter(w, r.ProtoMajor)

			mifyCtxBuilder := core.NewMifyRequestContextBuilder(sc)
			mifyCtxBuilder.SetRequestID(middleware.GetReqID(r.Context()))
			mifyCtxBuilder.SetProtocol(r.Proto)
			mifyCtxBuilder.SetURLPath(r.URL.Path)
			ctx := context.WithValue(r.Context(), MifyContextField, mifyCtxBuilder)

			next.ServeHTTP(ww, r.WithContext(ctx))
		}
		return http.HandlerFunc(fn)
	}
}

// GetRequestContextBuilder allows getting current request context in between
// middleware calls. This is useful for accessing sevice dependencies inside
// middleware, while keeping the context flow intact.
func GetMifyRequestContextBuilder(r *http.Request) *core.MifyRequestContextBuilder {
	return r.Context().Value(MifyContextField).(*core.MifyRequestContextBuilder)
}
