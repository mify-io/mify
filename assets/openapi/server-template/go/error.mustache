{{>partial_header}}
// vim: set ft=go:

package {{packageName}}

import (
	"errors"
	"fmt"
	"net/http"
)

var (
	// ErrTypeAssertionError is thrown when type an interface does not match the asserted type
	ErrTypeAssertionError = errors.New("unable to assert type")
)

type DefaultError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func NewDefaultError(code int, message string) DefaultError {
	return DefaultError{Code: code, Message: message}
}

// ParsingError indicates that an error has occurred when parsing request parameters
type ParsingError struct {
	Err error
}

func (e *ParsingError) Unwrap() error {
	return e.Err
}

func (e *ParsingError) Error() string {
	return e.Err.Error()
}

// RequiredError indicates that an error has occurred when parsing request parameters
type RequiredError struct {
	Field string
}

func (e *RequiredError) Error() string {
	return fmt.Sprintf("required field '%s' is zero value.", e.Field)
}

// ErrorHandler defines the required method for handling error. You may implement it and inject this into a controller if
// you would like errors to be handled differently from the DefaultErrorHandler
type ErrorHandler func(w http.ResponseWriter, r *http.Request, err error, result *ServiceResponse)

// DefaultErrorHandler defines the default logic on how to handle errors from the controller. Any errors from parsing
// request params will return a StatusBadRequest. Otherwise, the error code originating from the servicer will be used.
func DefaultErrorHandler(w http.ResponseWriter, r *http.Request, err error, result *ServiceResponse) {
	if _, ok := err.(*ParsingError); ok {
		// Handle parsing errors
		code := http.StatusBadRequest
		EncodeJSONResponse(NewDefaultError(code, err.Error()), &code, {{#addResponseHeaders}} map[string][]string{},{{/addResponseHeaders}} w)
	} else if _, ok := err.(*RequiredError); ok {
		// Handle missing required errors
		code := http.StatusUnprocessableEntity
		EncodeJSONResponse(NewDefaultError(code, err.Error()), &code, {{#addResponseHeaders}} map[string][]string{},{{/addResponseHeaders}} w)
	} else {
		// Handle all other errors
		EncodeJSONResponse(result.Body, &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)
	}
}

// HandleRouterError used for handling unknown paths and incorrect method errors
// it logs error calls the same way as the normal requests and returns JSON.
func HandleRouterError(status int) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var requestBody []byte
		var result ServiceResponse
		errorMsg := http.StatusText(status)
		result = Response(status, NewDefaultError(status, errorMsg))
		handlerErr := errors.New(errorMsg)
		ctxBuilder := GetMifyRequestContextBuilder(r)
		defer LogHandler(ctxBuilder, requestBody, &result, &handlerErr)()
		DefaultErrorHandler(w, r, handlerErr, &result)
	}
}
