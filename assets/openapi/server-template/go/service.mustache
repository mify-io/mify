package {{classFilename}}

import (
	"net/http"
	"errors"

	{{#imports}}
	"{{import}}"{{/imports}}
	"{{goModule}}/internal/{{serviceName}}/generated/core"
	"{{goModule}}/internal/{{serviceName}}/generated/api"
)

type {{classname}}Service struct {}

// New{{classname}}Service creates a default api service
func New{{classname}}Service() {{packageName}}.{{classname}}Servicer {
	return &{{classname}}Service{}
}{{#operations}}{{#operation}}

// {{nickname}} - {{summary}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (s *{{classname}}Service) {{nickname}}(ctx *core.MifyRequestContext
// service_params_start
{{#allParams}}
{"name":"{{paramName}}", "type":"{{dataType}}"}
{{/allParams}}
// service_params_end
) ({{packageName}}.ServiceResponse, error) {
	// TODO: add handler logic

{{#responses}}
{{#dataType}}
	//TODO: Uncomment the next line to return response Response({{code}}, {{dataType}}{}) or use other options such as http.Ok
	//return {{packageName}}.Response({{code}}, {{dataType}}{}), nil

{{/dataType}}
{{^dataType}}
	//TODO: Uncomment the next line to return response Response({{code}}, {{dataType}}{}) or use other options such as http.Ok
	//return {{packageName}}.Response({{code}}, nil), nil

{{/dataType}}
{{/responses}}
	return {{packageName}}.Response(http.StatusNotImplemented, nil), errors.New("{{nickname}} method not implemented")
}{{/operation}}{{/operations}}
